package main

import (
	"context"
	"flag"
	"fmt"
	"go.guoyk.net/unizone/pkg/providers"
	"log"
	"os"
	"time"
)

func main() {
	var (
		optConf string
	)

	flag.StringVar(&optConf, "c", "unizone.yml", "configuration file")
	flag.Parse()

	var err error
	defer func(err *error) {
		if *err != nil {
			log.Println("exited with error:", (*err).Error())
			os.Exit(1)
		} else {
			log.Println("exited")
		}
	}(&err)

	var cfg Config
	if err = LoadConfigFile(optConf, &cfg); err != nil {
		return
	}

	log.Println("configuration loaded")

	fmt.Println("; Generated by UniZONE at", time.Now().Format(time.RFC3339))
	fmt.Println(";")
	fmt.Printf("$TTL %d", cfg.TTL)
	fmt.Println(";")

	recordNames := map[string]bool{}

	for _, cloud := range cfg.Providers {
		log.Println("inspecting provider:", cloud.Name)
		for _, network := range cloud.Networks {
			log.Println("inspecting network:", cloud.Name, network.Region, network.ID)
			var provider providers.Provider
			if provider, err = providers.Create(cloud.Provider, providers.Options{
				Name:        cloud.Name,
				TokenID:     cloud.TokenID,
				TokenSecret: cloud.TokenSecret,
				Region:      network.Region,
			}); err != nil {
				return
			}
			for _, service := range cloud.Services {
				log.Println("inspecting service:", cloud.Name, network.Region, network.ID, service)
				var records []providers.Record
				if records, err = provider.ListRecords(context.Background(), network.ID, service); err != nil {
					return
				}
				log.Printf("found %d records", len(records))
				for _, record := range records {
					if recordNames[record.Name] {
						log.Println(
							"found a duplicated record:",
							cloud.Name,
							network.Region,
							network.ID,
							service,
							record.Name,
						)
					} else {
						recordNames[record.Name] = true
						fmt.Printf("; %s/%s/%s/%s: %s", cloud.Name, network.Region, network.ID, service, record.Comment)
						fmt.Printf("%s %d IN A %s", record.Name, cfg.TTL, record.IP)
					}
				}
			}
		}
	}
}
